SELECT     poly.*,    COALESCE(point_summary.hablabel, '') AS hablabel,    COALESCE(point_summary.eunis1, '') AS eunis1,    COALESCE(point_summary.eunis2, '') AS eunis2,    COALESCE(point_summary.couleur, '') AS couleur,	COALESCE(point_summary.enjeu_ecol, '') AS enjeu_ecol,	COALESCE(point_summary.etat_conse, '') AS etat_conse,	    SUBSTRING(point_summary.eunis1, 1, STRPOS(point_summary.eunis1, '-') - 1)    || CASE WHEN point_summary.eunis2 = '' OR point_summary.eunis2 IS NULL THEN '' ELSE 'x' || SUBSTRING(point_summary.eunis2,1, STRPOS(point_summary.eunis2, '-') - 1) END ||'-'|| point_summary.hablabel AS nom_habitatFROM     HABITATS_POLYGONES AS polyLEFT JOIN (    SELECT         poly_id,        MIN(hablabel) AS hablabel,        MIN(eunis1) AS eunis1,        MIN(eunis2) AS eunis2,        MIN(couleur) AS couleur,		MIN(enjeu_ecol) AS enjeu_ecol,		MIN(etat_conse) AS etat_conse    FROM         (            SELECT                 poly.fid AS poly_id,                point.hablabel,                point.eunis1,                point.eunis2,                point.couleur,				point.enjeu_ecol,                point.etat_conse								            FROM                 HABITATS_POLYGONES AS poly            JOIN                 RELEVE_HABITAT AS point             ON                 ST_Intersects(poly.geometry, point.geometry)            WHERE                 point.hablabel IS NOT NULL         ) AS intersecting_points    GROUP BY         poly_id) AS point_summaryON     poly.fid = point_summary.poly_id;